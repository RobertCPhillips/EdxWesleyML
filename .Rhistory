if (sum(rolls == 1) == 2) {
g <- g + 1
i <- i + (rolls[1] == 1)
}
}
c(i,g)
i / g
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 2) {
g <- g + 1
i <- i + (rolls[1] == 1)
}
}
c(i,g)
i / g
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 2) {
g <- g + 1
i <- i + (rolls[1] == 1)
}
}
c(i,g)
i / g
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 2) {
g <- g + 1
i <- i + (rolls[1] == 1)
}
}
c(i,g)
i / g
choose(6,2)
choose(6,3)
i <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
i
i/sims
i <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
i
i/sims
i <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
i
i/sims
i <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == target) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == targ) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == targ) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == targ) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == targ) == 6)
}
i
i/sims
i <- 0
sims <- 100000
targ <- c(1,2,1,2,1,2)
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
i <- i + (sum(rolls == targ) == 6)
}
i
i/sims
targ
targ == c(1,2,3,4,5,6)
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 3 && sum(rolls == 2) == 3) {
g <- g + 1
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
}
c(i,g)
i / g
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 3 && sum(rolls == 2) == 3) {
g <- g + 1
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
}
c(i,g)
i / g
i <- 0
g <- 0
sims <- 10000
for (d in 1:sims) {
rolls <- sample(1:3, 6, replace=T, prob = c(1/2, 1/4, 1/4))
if (sum(rolls == 1) == 3 && sum(rolls == 2) == 3) {
g <- g + 1
i <- i + (sum(rolls == c(1,2,1,2,1,2)) == 6)
}
}
c(i,g)
i / g
1/20
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:10
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
hats[ms]
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
factorial(m)/factorial(n)
factorial(n-m)/factorial(n)
i/sims
factorial(n)/(factorial(n+m))
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 0)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 0)
}
i
1/choose(n,m)
i/sims
m/choose(n,m)
n/choose(n,m)
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] == ms) == 4)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] > m) == m)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] > m) == m)
}
i
i/sims
1/choose(n,m)
m/choose(n,m)
n/choose(n,m)
hats[ms] > m
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] > n-m) == m)
}
i
i <- 0
n <- 10
m <- 4
sims <- 100000
peeps <- 1:n
for (d in 1:sims) {
ms <- 1:m #sample(peeps, m, replace=F)
hats <- sample(peeps, n, replace=F)
i <- i + (sum(hats[ms] > n-m) == m)
}
i
i/sims
n/choose(n,m)
m/choose(n,m)
1/choose(n,m)
data <- read.csv("Schooling.csv")
#remove the iqscore variable
data$iqscore <- NULL
#remove observations with NA values
data <- na.omit(data)
#define the model with wage76 as the target
model1 <- wage76 ~ smsa66 + smsa76 + nearc2 + nearc4 + nearc4a + nearc4b + ed76 + ed66 + age76 +
daded + nodaded + momed + nomomed + momdad14 + sinmom14 + step14 + south66 + south76 +
famed + black + enroll76 + kww + mar76 + libcrd14 + exp76
#build the matrix and vector
X <- model.matrix(model1, data)[,-1]
Y <- data$wage76
#center and scale our matrix values
X <- scale(X)
#split into training and test sets
set.seed(1972)
train.rows <- sample(1:nrow(X), nrow(X) / 2)
test.rows <- (-train.rows)
X.train <- X[train.rows,]
Y.train <- Y[train.rows]
X.test <- X[test.rows,]
Y.test <- Y[test.rows]
kms <- list()
set.seed(100)
for (i in 2:15) kms[[i]] <- kmeans(X.train, centers=i, nstart=50)
kms.withinss <- sapply(sapply(kms, "[[", "withinss"), sum)
plot(2:15, kms.withinss[2:15], type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
#store the 4-clsuter model in a new variable
kms.4 <- kms[[4]]
#display the counts per cluster
table(kms.4$cluster)
#kms.4.pca <- prcomp(X.train)
#summary(kms.4.pca)
#kms.4.pc2 <- kms.4.pca$x[,1:2]
#kms.4.pc2$cluster <- kms.4$cluster
#plot(PC2~PC1, data=kms.4.pc2)
setwd("C:/Users/robertc/Desktop/machine learning/EdxWesleyML")
data <- read.csv("Schooling.csv")
#remove the iqscore variable
data$iqscore <- NULL
#remove observations with NA values
data <- na.omit(data)
#define the model with wage76 as the target
model1 <- wage76 ~ smsa66 + smsa76 + nearc2 + nearc4 + nearc4a + nearc4b + ed76 + ed66 + age76 +
daded + nodaded + momed + nomomed + momdad14 + sinmom14 + step14 + south66 + south76 +
famed + black + enroll76 + kww + mar76 + libcrd14 + exp76
#build the matrix and vector
X <- model.matrix(model1, data)[,-1]
Y <- data$wage76
#center and scale our matrix values
X <- scale(X)
#split into training and test sets
set.seed(1972)
train.rows <- sample(1:nrow(X), nrow(X) / 2)
test.rows <- (-train.rows)
X.train <- X[train.rows,]
Y.train <- Y[train.rows]
X.test <- X[test.rows,]
Y.test <- Y[test.rows]
kms <- list()
set.seed(100)
for (i in 2:15) kms[[i]] <- kmeans(X.train, centers=i, nstart=50)
kms.withinss <- sapply(sapply(kms, "[[", "withinss"), sum)
plot(2:15, kms.withinss[2:15], type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
#store the 4-clsuter model in a new variable
kms.4 <- kms[[4]]
#display the counts per cluster
table(kms.4$cluster)
#kms.4.pca <- prcomp(X.train)
#summary(kms.4.pca)
#kms.4.pc2 <- kms.4.pca$x[,1:2]
#kms.4.pc2$cluster <- kms.4$cluster
#plot(PC2~PC1, data=kms.4.pc2)
kms.4.pca <- prcomp(X.train)
summary(kms.4.pca)
kms.4.pca$x[,1:2]
kms.4.pc2 <- kms.4.pca$x[,1:2]
kms.4.pc2 <- as.data.frame(kms.4.pca$x[,1:2])
kms.4.pc2$cluster <- kms.4$cluster
View(kms.4.pc2)
?plot
points(PC2~PC1, data=kms.4.pc2, col="cluster")
points(PC2~PC1, data=kms.4.pc2)
points(PC2~PC1, data=kms.4.pc2)
plot(PC2~PC1, data=kms.4.pc2)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point(shape=1)
require(ggplot2)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point(shape=1)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster, shape=cluster)) + geom_point(shape=1)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster, shape=cluster)) + geom_point()
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point()
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point() +
scale_fill_brewer(palette="Set1")
install.packages("RColorBrewer ")
install.packages("RColorBrewer")
require(RColorBrewer)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point() +
scale_fill_brewer(palette="Set1")
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point() +
scale_fill_manual(values=c("red", "blue", "green", "yellow"))
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point(shape=16) +
scale_fill_manual(values=c("red", "blue", "green", "yellow"))
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set1")
kms.4.pc2$cluster <- as.factor(kms.4$cluster)
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set1")
ggplot(kms.4.pc2, aes(x=PC1, y=PC2, color=cluster, shape=cluster)) + geom_point() +
scale_colour_brewer(palette="Set1")
X.train.pca <- prcomp(X.train)
summary(X.train.pca)
X.train.pca.2 <- as.data.frame(X.train.pca$x[,1:2])
X.train.pca.2$cluster4 <- as.factor(kms.4$cluster)
ggplot(X.train.pca.2, aes(x=PC1, y=PC2, color=cluster4)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set1")
View(X.train)
cor(X.train.pca$x[1], X.train$ed76)
X.train
names(X.train)
colnames(X.train)
cor(X.train.pca$x[1], X.train[,"ed76"])
dim(X.train.pca$x[1])
dim(X.train.pca$x)
dim(X.train)
X.train[,"ed76"]
cor(X.train.pca$x[1], X.train[,"ed76"])
zz1 <- x.train.pca$x[1]
zz1 <- X.train.pca$x[1]
cor(X.train.pca$x[,1], X.train[,"ed76"])
cor(X.train.pca$x[,1], X.train)
cor(X.train.pca$x[,1:2], X.train)
zzz <- cor(X.train.pca$x[,1:2], X.train)
t(zzz)
cor(X.train, X.train.pca$x[,1:2])
X.train.cor <- cor(X.train, X.train.pca.2)
X.train
X.train.pca.2
head(X.train.pca.2)
X.train.cor <- cor(X.train, X.train.pca.2[-1])
X.train.pca.2[-1]
X.train.pca.2[1:2]
X.train.cor <- cor(X.train, X.train.pca.2[1:2])
X.train.cor
Y.train.4 <- Y.train
Y.train.4$cluster <- as.factor(kms.4$cluster)
Y.train.4
Y.train
Y.train.4 <- data.frame(wage=Y, cluster=as.factor(kms.4$cluster))
View(Y.train.4)
?aggregate
aggregate(Y.train.4, cluster, mean)
aggregate(Y.train.4, c(1,2,3,4), mean)
aggregate(Y.train.4, list(1,2,3,4), mean)
aggregate(Y.train.4, list(cluster), mean)
aggregate(Y.train.4, list(Y.train.4$cluster), mean)
aggregate(wage ~ cluster, data = Y.train.4, FUN = mean)
aggregate(wage ~ cluster, data = Y.train.4, FUN = mean)
#store the 4-cluster model in a new variable
kms.10 <- kms[[10]]
#display the counts per cluster
table(kms.10$cluster)
#10-cluster assignment (also remove 4)
X.train.pca.2$cluster4 <- NULL
X.train.pca.2$cluster10 <- as.factor(kms.10$cluster)
#plot the clustering
ggplot(X.train.pca.2, aes(x=PC1, y=PC2, color=cluster10)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set1")
ggplot(X.train.pca.2, aes(x=PC1, y=PC2, color=cluster10)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set2")
ggplot(X.train.pca.2, aes(x=PC1, y=PC2, color=cluster10)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set20")
#store the 4-cluster model in a new variable
kms.9 <- kms[[9]]
#display the counts per cluster
table(kms.9$cluster)
#10-cluster assignment (also remove 4)
X.train.pca.2$cluster4 <- NULL
X.train.pca.2$cluster9 <- as.factor(kms.9$cluster)
#plot the clustering
ggplot(X.train.pca.2, aes(x=PC1, y=PC2, color=cluster9)) + geom_point(shape=16) +
scale_colour_brewer(palette="Set1")
#add cluster to the wage values
Y.train.9 <- data.frame(wage=Y, cluster=as.factor(kms.9$cluster))
#compute means per cluster
aggregate(wage ~ cluster, data = Y.train.9, FUN = mean)
